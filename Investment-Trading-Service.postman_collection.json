{
    "info": {
        "_postman_id": "investment-trading-service-api",
        "name": "Investment Trading Service API",
        "description": "Коллекция для тестирования API инвестиционного торгового сервиса с интеграцией Tinkoff Invest API (обновлено под актуальную версию контроллеров)",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "investment-trading-service"
    },
    "item": [
        {
            "name": "Cache Management",
            "description": "Управление кэшем системы",
            "item": [
                {
                    "name": "Clear Cache",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/cache/clear",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "clear"
                            ]
                        },
                        "description": "Очистка всех кэшей системы"
                    },
                    "response": []
                },
                {
                    "name": "Force Update Cache",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/cache/force-update",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "force-update"
                            ]
                        },
                        "description": "Принудительное обновление кэша"
                    },
                    "response": []
                },
                {
                    "name": "Get Cache Statistics",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/statistics",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "statistics"
                            ]
                        },
                        "description": "Получение статистики кэша для диагностики"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Instruments",
            "description": "Получение инструментов из кэша",
            "item": [
                {
                    "name": "Get All Instruments",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/instruments",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "instruments"
                            ]
                        },
                        "description": "Получение всех инструментов (акции, фьючерсы, индикативы, цены, дивиденды) из кэша"
                    },
                    "response": []
                },
                {
                    "name": "Get Shares",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/shares",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "shares"
                            ]
                        },
                        "description": "Получение акций только из кэша"
                    },
                    "response": []
                },
                {
                    "name": "Get Futures",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/futures",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "futures"
                            ]
                        },
                        "description": "Получение фьючерсов только из кэша"
                    },
                    "response": []
                },
                {
                    "name": "Get Indicatives",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/indicatives",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "indicatives"
                            ]
                        },
                        "description": "Получение индикативов только из кэша"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Prices",
            "description": "Получение цен из кэша",
            "item": [
                {
                    "name": "Get Close Prices",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/close-prices",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "close-prices"
                            ]
                        },
                        "description": "Получение цен закрытия только из кэша"
                    },
                    "response": []
                },
                {
                    "name": "Get Open Prices",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/open-prices",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "open-prices"
                            ]
                        },
                        "description": "Получение цен открытия только из кэша"
                    },
                    "response": []
                },
                {
                    "name": "Get Last Prices",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/last-prices",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "last-prices"
                            ]
                        },
                        "description": "Получение последних цен инструментов только из кэша"
                    },
                    "response": []
                },
                {
                    "name": "Get Close Price Evening Sessions",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/close-price-evening-sessions",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "close-price-evening-sessions"
                            ]
                        },
                        "description": "Получение цен закрытия вечерней сессии только из кэша"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Dividends",
            "description": "Получение дивидендов из кэша",
            "item": [
                {
                    "name": "Get Dividends",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/dividends",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "dividends"
                            ]
                        },
                        "description": "Получение дивидендов на сегодня/завтра только из кэша"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Search by FIGI",
            "description": "Поиск инструментов по FIGI",
            "item": [
                {
                    "name": "Get Instrument by FIGI",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/by-figi/{{figi}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "by-figi",
                                "{{figi}}"
                            ]
                        },
                        "description": "Поиск инструмента по FIGI во всех типах кэшей с fallback на БД"
                    },
                    "response": []
                },
                {
                    "name": "Get Instrument by FIGI (Cache Only)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/cache/by-figi-cache-only/{{figi}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "by-figi-cache-only",
                                "{{figi}}"
                            ]
                        },
                        "description": "Поиск инструмента по FIGI только в кэше (без обращения к БД)"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Orders Management",
            "description": "Управление заявками и групповыми операциями",
            "item": [
                {
                    "name": "Create Group Order",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"instruments\": [\"BBG000B9XRY4\", \"BBG000B9XRY5\"],\n    \"main_price\": \"open_price\",\n    \"amount\": 10000,\n    \"direction\": \"buy\",\n    \"start_time\": \"10:00:00\",\n    \"levels\": {\n        \"level1\": 5.0,\n        \"level2\": 10.0,\n        \"level3\": 15.0\n    }\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/orders/group",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "group"
                            ]
                        },
                        "description": "Создание групповой заявки с несколькими инструментами и уровнями (возвращает List<OrderDTO>)"
                    },
                    "response": []
                },
                {
                    "name": "Create Group Order with Price",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"instruments\": [\"BBG000B9XRY4\", \"BBG000B9XRY5\"],\n    \"main_price\": \"open_price\",\n    \"amount\": 10000,\n    \"direction\": \"buy\",\n    \"start_time\": \"10:00:00\",\n    \"levels\": {\n        \"level1\": 5.0,\n        \"level2\": 10.0,\n        \"level3\": 15.0\n    }\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/orders/group/with-price",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "group",
                                "with-price"
                            ]
                        },
                        "description": "Создание групповой заявки с возвратом цены инструмента (возвращает GroupOrderResponseDTO)"
                    },
                    "response": []
                },
                {
                    "name": "Get Cached Orders",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/orders/cache",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "cache"
                            ]
                        },
                        "description": "Получение всех заявок из кэша"
                    },
                    "response": []
                },
                {
                    "name": "Get Order by ID",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/orders/{{order_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "{{order_id}}"
                            ]
                        },
                        "description": "Получение заявки по UUID"
                    },
                    "response": []
                },
                {
                    "name": "Send Order (Force)",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/orders/{{order_id}}/send",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "{{order_id}}",
                                "send"
                            ]
                        },
                        "description": "Принудительная отправка заявки (не дожидаясь scheduled time)"
                    },
                    "response": []
                },
                {
                    "name": "Cancel Order",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/orders/{{order_id}}/cancel",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "{{order_id}}",
                                "cancel"
                            ]
                        },
                        "description": "Отмена заявки по UUID"
                    },
                    "response": []
                },
                {
                    "name": "Delete Order",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/orders/{{order_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "{{order_id}}"
                            ]
                        },
                        "description": "Удаление заявки по UUID"
                    },
                    "response": []
                },
                {
                    "name": "Get Orders by Status",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/orders/status/{{status}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "status",
                                "{{status}}"
                            ]
                        },
                        "description": "Получение заявок по статусу (PENDING, SENT, EXECUTED, REJECTED, CANCELLED, ERROR)"
                    },
                    "response": []
                },
                {
                    "name": "Get Orders Ready to Send",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/orders/ready/{{time}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "ready",
                                "{{time}}"
                            ]
                        },
                        "description": "Получение заявок, готовых к отправке в указанное время (HH:mm:ss)"
                    },
                    "response": []
                },
                {
                    "name": "Get Orders Statistics",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/orders/statistics",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "statistics"
                            ]
                        },
                        "description": "Получение статистики по заявкам"
                    },
                    "response": []
                },
                {
                    "name": "Get Scheduler Statistics",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/orders/scheduler/statistics",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "scheduler",
                                "statistics"
                            ]
                        },
                        "description": "Получение статистики планировщика заявок"
                    },
                    "response": []
                },
                {
                    "name": "Get Orders with Errors",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/orders/errors",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "errors"
                            ]
                        },
                        "description": "Получение заявок с ошибками"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Health & Monitoring",
            "description": "Мониторинг состояния приложения",
            "item": [
                {
                    "name": "Health Check",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/actuator/health",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "actuator",
                                "health"
                            ]
                        },
                        "description": "Проверка состояния приложения"
                    },
                    "response": []
                },
                {
                    "name": "Application Info",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/actuator/info",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "actuator",
                                "info"
                            ]
                        },
                        "description": "Получение информации о приложении"
                    },
                    "response": []
                },
                {
                    "name": "Metrics",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/actuator/metrics",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "actuator",
                                "metrics"
                            ]
                        },
                        "description": "Получение метрик приложения"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Testing Scenarios",
            "description": "Сценарии тестирования",
            "item": [
                {
                    "name": "Full Cache Test",
                    "item": [
                        {
                            "name": "1. Clear Cache",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Cache cleared successfully', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json().status).to.eql('success');",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "url": {
                                    "raw": "{{base_url}}/api/cache/clear",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "cache",
                                        "clear"
                                    ]
                                }
                            }
                        },
                        {
                            "name": "2. Force Update Cache",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Cache updated successfully', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json().status).to.eql('success');",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "url": {
                                    "raw": "{{base_url}}/api/cache/force-update",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "cache",
                                        "force-update"
                                    ]
                                }
                            }
                        },
                        {
                            "name": "3. Get All Instruments",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Instruments retrieved successfully', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json().success).to.be.true;",
                                            "    pm.expect(pm.response.json().shares).to.be.an('array');",
                                            "    pm.expect(pm.response.json().futures).to.be.an('array');",
                                            "    pm.expect(pm.response.json().lastPrices).to.be.an('array');",
                                            "    pm.expect(pm.response.json().dividends).to.be.an('array');",
                                            "    pm.expect(pm.response.json().openPrices).to.be.an('array');",
                                            "    pm.expect(pm.response.json().closePriceEveningSessions).to.be.an('array');",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{base_url}}/api/cache/instruments",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "cache",
                                        "instruments"
                                    ]
                                }
                            }
                        },
                        {
                            "name": "4. Get Cache Statistics",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Cache statistics retrieved', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json().status).to.eql('success');",
                                            "    pm.expect(pm.response.json().cache_statistics).to.be.an('object');",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{base_url}}/api/cache/statistics",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "cache",
                                        "statistics"
                                    ]
                                }
                            }
                        }
                    ],
                    "description": "Полный тест кэширования: очистка → обновление → получение данных → статистика"
                },
                {
                    "name": "Performance Test",
                    "item": [
                        {
                            "name": "Get Instruments (Performance)",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Response time is less than 2000ms', function () {",
                                            "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                                            "});",
                                            "",
                                            "pm.test('Instruments data is valid', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json().success).to.be.true;",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{base_url}}/api/cache/instruments",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "cache",
                                        "instruments"
                                    ]
                                }
                            }
                        }
                    ],
                    "description": "Тест производительности API"
                },
                {
                    "name": "FIGI Search Test",
                    "item": [
                        {
                            "name": "1. Search by FIGI (with fallback)",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Instrument found by FIGI', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json().success).to.be.true;",
                                            "    pm.expect(pm.response.json().data).to.be.an('array');",
                                            "    pm.expect(pm.response.json().metadata.figi).to.be.a('string');",
                                            "    pm.expect(pm.response.json().dataType).to.equal('instruments');",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{base_url}}/api/cache/by-figi/{{figi}}",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "cache",
                                        "by-figi",
                                        "{{figi}}"
                                    ]
                                }
                            }
                        },
                        {
                            "name": "2. Search by FIGI (cache only)",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Instrument found by FIGI in cache only', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json().success).to.be.true;",
                                            "    pm.expect(pm.response.json().metadata.cacheOnly).to.be.true;",
                                            "    pm.expect(pm.response.json().data).to.be.an('array');",
                                            "    pm.expect(pm.response.json().metadata.searchScope).to.equal('cache_only');",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{base_url}}/api/cache/by-figi-cache-only/{{figi}}",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "cache",
                                        "by-figi-cache-only",
                                        "{{figi}}"
                                    ]
                                }
                            }
                        }
                    ],
                    "description": "Тест поиска инструментов по FIGI"
                },
                {
                    "name": "Orders Management Test",
                    "item": [
                        {
                            "name": "1. Create Group Order",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Group order created successfully', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json()).to.be.an('array');",
                                            "    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
                                            "    ",
                                            "    // Сохраняем первый order_id для следующих тестов",
                                            "    if (pm.response.json().length > 0) {",
                                            "        pm.globals.set('order_id', pm.response.json()[0].orderId);",
                                            "    }",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"instruments\": [\"BBG000B9XRY4\", \"BBG000B9XRY5\"],\n    \"main_price\": \"open_price\",\n    \"amount\": 10000,\n    \"direction\": \"buy\",\n    \"start_time\": \"10:00:00\",\n    \"levels\": {\n        \"level1\": 5.0,\n        \"level2\": 10.0,\n        \"level3\": 15.0\n    }\n}"
                                },
                                "url": {
                                    "raw": "{{base_url}}/api/orders/group",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "orders",
                                        "group"
                                    ]
                                }
                            }
                        },
                        {
                            "name": "1.1. Create Group Order with Price",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Group order with price created successfully', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json().orders).to.be.an('array');",
                                            "    pm.expect(pm.response.json().instrumentPrice).to.be.a('number');",
                                            "    pm.expect(pm.response.json().orders.length).to.be.greaterThan(0);",
                                            "    ",
                                            "    // Сохраняем первый order_id для следующих тестов",
                                            "    if (pm.response.json().orders.length > 0) {",
                                            "        pm.globals.set('order_id', pm.response.json().orders[0].orderId);",
                                            "    }",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"instruments\": [\"BBG000B9XRY4\", \"BBG000B9XRY5\"],\n    \"main_price\": \"open_price\",\n    \"amount\": 10000,\n    \"direction\": \"buy\",\n    \"start_time\": \"10:00:00\",\n    \"levels\": {\n        \"level1\": 5.0,\n        \"level2\": 10.0,\n        \"level3\": 15.0\n    }\n}"
                                },
                                "url": {
                                    "raw": "{{base_url}}/api/orders/group/with-price",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "orders",
                                        "group",
                                        "with-price"
                                    ]
                                }
                            }
                        },
                        {
                            "name": "2. Get Created Order",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Order retrieved successfully', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json().data).to.be.an('object');",
                                            "    pm.expect(pm.response.json().data.orderId).to.be.a('string');",
                                            "    pm.expect(pm.response.json().data.quantity).to.be.a('number');",
                                            "    pm.expect(pm.response.json().data.direction).to.be.a('string');",
                                            "    pm.expect(pm.response.json().data.instrumentId).to.be.a('string');",
                                            "    pm.expect(pm.response.json().message).to.be.a('string');",
                                            "    pm.expect(pm.response.json().totalCount).to.equal(1);",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{base_url}}/api/orders/{{order_id}}",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "orders",
                                        "{{order_id}}"
                                    ]
                                }
                            }
                        },
                        {
                            "name": "3. Get Orders by Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Orders by status retrieved', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json()).to.be.an('array');",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{base_url}}/api/orders/status/PENDING",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "orders",
                                        "status",
                                        "PENDING"
                                    ]
                                }
                            }
                        },
                        {
                            "name": "4. Cancel Order",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Order cancelled successfully', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json().data).to.be.a('string');",
                                            "    pm.expect(pm.response.json().message).to.include('отменена');",
                                            "    pm.expect(pm.response.json().metadata.newStatus).to.equal('CANCELLED');",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "url": {
                                    "raw": "{{base_url}}/api/orders/{{order_id}}/cancel",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "orders",
                                        "{{order_id}}",
                                        "cancel"
                                    ]
                                }
                            }
                        },
                        {
                            "name": "5. Get Orders Statistics",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('Orders statistics retrieved', function () {",
                                            "    pm.response.to.have.status(200);",
                                            "    pm.expect(pm.response.json().data).to.be.a('string');",
                                            "    pm.expect(pm.response.json().message).to.include('статистика');",
                                            "    pm.expect(pm.response.json().dataType).to.equal('statistics');",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{base_url}}/api/orders/statistics",
                                    "host": [
                                        "{{base_url}}"
                                    ],
                                    "path": [
                                        "api",
                                        "orders",
                                        "statistics"
                                    ]
                                }
                            }
                        }
                    ],
                    "description": "Полный тест управления заявками: создание → получение → отмена → статистика"
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "base_url",
            "value": "http://localhost:8080",
            "type": "string"
        },
        {
            "key": "order_id",
            "value": "",
            "type": "string"
        },
        {
            "key": "figi",
            "value": "BBG000B9XRY4",
            "type": "string"
        }
    ]
}