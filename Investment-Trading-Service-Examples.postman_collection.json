{
    "info": {
        "_postman_id": "investment-trading-service-examples",
        "name": "Investment Trading Service - Examples & Tests",
        "description": "Коллекция с примерами запросов и тестами для сервиса интеграции с Tinkoff Invest API",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "investment-trading-service-examples"
    },
    "item": [
        {
            "name": "Health Checks",
            "item": [
                {
                    "name": "Application Health Check",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}{{health_check_endpoint}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "{{health_check_endpoint}}"
                            ]
                        },
                        "description": "Проверка состояния приложения через Spring Boot Actuator"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Health check returns 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Health check response time is acceptable', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                                    "});",
                                    "",
                                    "pm.test('Health check contains status field', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Application Metrics",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}{{metrics_endpoint}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "{{metrics_endpoint}}"
                            ]
                        },
                        "description": "Получение метрик приложения"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Metrics endpoint returns 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Metrics response contains names array', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('names');",
                                    "    pm.expect(jsonData.names).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ]
                }
            ],
            "description": "Проверки состояния приложения"
        },
        {
            "name": "Cache Operations - Examples",
            "item": [
                {
                    "name": "Clear Cache - Example",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "{{content_type_json}}"
                            },
                            {
                                "key": "Accept",
                                "value": "{{accept_json}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}{{cache_clear_endpoint}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "clear"
                            ]
                        },
                        "description": "Пример запроса на очистку кэша с проверками"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Clear cache returns 200 or 500', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 500]);",
                                    "});",
                                    "",
                                    "pm.test('Response contains status field', function () {",
                                    "    if (pm.response.code === 200) {",
                                    "        const jsonData = pm.response.json();",
                                    "        pm.expect(jsonData).to.have.property('status');",
                                    "        pm.expect(jsonData.status).to.equal('success');",
                                    "    }",
                                    "});",
                                    "",
                                    "pm.test('Response contains timestamp', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('timestamp');",
                                    "    pm.expect(jsonData.timestamp).to.be.a('number');",
                                    "});",
                                    "",
                                    "pm.test('Response time is acceptable', function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below({{expected_response_time}});",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Force Update Cache - Example",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "{{content_type_json}}"
                            },
                            {
                                "key": "Accept",
                                "value": "{{accept_json}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "\"{{test_entity}}\""
                        },
                        "url": {
                            "raw": "{{base_url}}{{cache_force_update_endpoint}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "cache",
                                "force-update"
                            ]
                        },
                        "description": "Пример запроса на принудительное обновление кэша"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Force update returns 200 or 500', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 500]);",
                                    "});",
                                    "",
                                    "pm.test('Response contains expected fields', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData).to.have.property('timestamp');",
                                    "});"
                                ]
                            }
                        }
                    ]
				{
                        "name": "Get Cache Statistics - Example",
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "Accept",
                                    "value": "{{accept_json}}"
                                }
                            ],
                            "url": {
                                "raw": "{{base_url}}{{cache_statistics_endpoint}}",
                                "host": [
                                    "{{base_url}}"
                                ],
                                "path": [
                                    "api",
                                    "cache",
                                    "statistics"
                                ]
                            },
                            "description": "Пример запроса на получение статистики кэша"
                        },
                        "response": [],
                        "event": [
                            {
                                "listen": "test",
                                "script": {
                                    "type": "text/javascript",
                                    "exec": [
                                        "pm.test('Cache statistics endpoint returns 200', function () {",
                                        "    pm.response.to.have.status(200);",
                                        "});",
                                        "",
                                        "pm.test('Response contains required fields', function () {",
                                        "    const jsonData = pm.response.json();",
                                        "    pm.expect(jsonData).to.have.property('message');",
                                        "    pm.expect(jsonData).to.have.property('status');",
                                        "    pm.expect(jsonData).to.have.property('cache_statistics');",
                                        "    pm.expect(jsonData).to.have.property('cache_statistics_json');",
                                        "    pm.expect(jsonData).to.have.property('timestamp');",
                                        "});",
                                        "",
                                        "pm.test('Cache statistics JSON contains expected structure', function () {",
                                        "    const jsonData = pm.response.json();",
                                        "    const cacheStatsJson = jsonData.cache_statistics_json;",
                                        "    pm.expect(cacheStatsJson).to.have.property('timestamp');",
                                        "    pm.expect(cacheStatsJson).to.have.property('total_caches');",
                                        "    pm.expect(cacheStatsJson).to.have.property('cache_type');",
                                        "    pm.expect(cacheStatsJson).to.have.property('caches');",
                                        "    pm.expect(cacheStatsJson.caches).to.have.property('shares_cache');",
                                        "    pm.expect(cacheStatsJson.caches).to.have.property('futures_cache');",
                                        "    pm.expect(cacheStatsJson.caches).to.have.property('indicatives_cache');",
                                        "});",
                                        "",
                                        "pm.test('Cache statistics text is not empty', function () {",
                                        "    const jsonData = pm.response.json();",
                                        "    pm.expect(jsonData.cache_statistics).to.be.a('string');",
                                        "    pm.expect(jsonData.cache_statistics.length).to.be.greaterThan(0);",
                                        "});",
                                        "",
                                        "pm.test('Response time is acceptable', function () {",
                                        "    pm.expect(pm.response.responseTime).to.be.below({{expected_response_time}});",
                                        "});"
                                    ]
                                }
                            }
                        ]
                    }
        {
                        "name": "Instruments - Examples",
                        "item": [
                            {
                                "name": "Get All Instruments - Example",
                                "request": {
                                    "method": "GET",
                                    "header": [
                                        {
                                            "key": "Accept",
                                            "value": "{{accept_json}}"
                                        }
                                    ],
                                    "url": {
                                        "raw": "{{base_url}}{{instruments_endpoint}}",
                                        "host": [
                                            "{{base_url}}"
                                        ],
                                        "path": [
                                            "api",
                                            "cache",
                                            "instruments"
                                        ]
                                    },
                                    "description": "Пример запроса на получение всех инструментов"
                                },
                                "response": [],
                                "event": [
                                    {
                                        "listen": "test",
                                        "script": {
                                            "type": "text/javascript",
                                            "exec": [
                                                "pm.test('Instruments endpoint returns 200', function () {",
                                                "    pm.response.to.have.status(200);",
                                                "});",
                                                "",
                                                "pm.test('Response contains required fields', function () {",
                                                "    const jsonData = pm.response.json();",
                                                "    pm.expect(jsonData).to.have.property('success');",
                                                "    pm.expect(jsonData).to.have.property('status');",
                                                "    pm.expect(jsonData).to.have.property('message');",
                                                "    pm.expect(jsonData).to.have.property('shares');",
                                                "    pm.expect(jsonData).to.have.property('futures');",
                                                "    pm.expect(jsonData).to.have.property('indicatives');",
                                                "});",
                                                "",
                                                "pm.test('Arrays are present and have size fields', function () {",
                                                "    const jsonData = pm.response.json();",
                                                "    pm.expect(jsonData.shares).to.be.an('array');",
                                                "    pm.expect(jsonData.futures).to.be.an('array');",
                                                "    pm.expect(jsonData.indicatives).to.be.an('array');",
                                                "    pm.expect(jsonData).to.have.property('shares_size');",
                                                "    pm.expect(jsonData).to.have.property('futures_size');",
                                                "    pm.expect(jsonData).to.have.property('indicatives_size');",
                                                "});",
                                                "",
                                                "pm.test('Response time is acceptable', function () {",
                                                "    pm.expect(pm.response.responseTime).to.be.below({{expected_response_time}});",
                                                "});"
                                            ]
                                        }
                                    }
                                ]
                            }
                        ],
                        "description": "Примеры работы с инструментами"
                    },
                    {
                        "name": "Price Data - Examples",
                        "item": [
                            {
                                "name": "Get Main Prices - Example",
                                "request": {
                                    "method": "GET",
                                    "header": [
                                        {
                                            "key": "Accept",
                                            "value": "{{accept_json}}"
                                        }
                                    ],
                                    "url": {
                                        "raw": "{{base_url}}{{main_prices_endpoint}}",
                                        "host": [
                                            "{{base_url}}"
                                        ],
                                        "path": [
                                            "api",
                                            "cache",
                                            "main-prices"
                                        ]
                                    },
                                    "description": "Пример запроса на получение основных цен"
                                },
                                "response": [],
                                "event": [
                                    {
                                        "listen": "test",
                                        "script": {
                                            "type": "text/javascript",
                                            "exec": [
                                                "pm.test('Main prices endpoint responds', function () {",
                                                "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                                                "});",
                                                "",
                                                "pm.test('Response time is acceptable', function () {",
                                                "    pm.expect(pm.response.responseTime).to.be.below({{expected_response_time}});",
                                                "});"
                                            ]
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "Get Evening Prices - Example",
                                "request": {
                                    "method": "GET",
                                    "header": [
                                        {
                                            "key": "Accept",
                                            "value": "{{accept_json}}"
                                        }
                                    ],
                                    "url": {
                                        "raw": "{{base_url}}{{evening_prices_endpoint}}",
                                        "host": [
                                            "{{base_url}}"
                                        ],
                                        "path": [
                                            "api",
                                            "cache",
                                            "evening-prices"
                                        ]
                                    },
                                    "description": "Пример запроса на получение вечерних цен"
                                },
                                "response": [],
                                "event": [
                                    {
                                        "listen": "test",
                                        "script": {
                                            "type": "text/javascript",
                                            "exec": [
                                                "pm.test('Evening prices endpoint responds', function () {",
                                                "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                                                "});"
                                            ]
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "Get Open Prices - Example",
                                "request": {
                                    "method": "GET",
                                    "header": [
                                        {
                                            "key": "Accept",
                                            "value": "{{accept_json}}"
                                        }
                                    ],
                                    "url": {
                                        "raw": "{{base_url}}{{open_prices_endpoint}}",
                                        "host": [
                                            "{{base_url}}"
                                        ],
                                        "path": [
                                            "api",
                                            "cache",
                                            "open-prices"
                                        ]
                                    },
                                    "description": "Пример запроса на получение цен открытия"
                                },
                                "response": [],
                                "event": [
                                    {
                                        "listen": "test",
                                        "script": {
                                            "type": "text/javascript",
                                            "exec": [
                                                "pm.test('Open prices endpoint responds', function () {",
                                                "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                                                "});"
                                            ]
                                        }
                                    }
                                ]
                            }
                        ],
                        "description": "Примеры работы с данными о ценах"
                    },
                    {
                        "name": "Dividends - Examples",
                        "item": [
                            {
                                "name": "Get Dividends - Example",
                                "request": {
                                    "method": "GET",
                                    "header": [
                                        {
                                            "key": "Accept",
                                            "value": "{{accept_json}}"
                                        }
                                    ],
                                    "url": {
                                        "raw": "{{base_url}}{{dividends_endpoint}}",
                                        "host": [
                                            "{{base_url}}"
                                        ],
                                        "path": [
                                            "api",
                                            "cache",
                                            "divedends"
                                        ]
                                    },
                                    "description": "Пример запроса на получение данных о дивидендах"
                                },
                                "response": [],
                                "event": [
                                    {
                                        "listen": "test",
                                        "script": {
                                            "type": "text/javascript",
                                            "exec": [
                                                "pm.test('Dividends endpoint responds', function () {",
                                                "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                                                "});"
                                            ]
                                        }
                                    }
                                ]
                            }
                        ],
                        "description": "Примеры работы с данными о дивидендах"
                    },
                    {
                        "name": "Instrument by FIGI - Examples",
                        "item": [
                            {
                                "name": "Get Sberbank by FIGI",
                                "request": {
                                    "method": "GET",
                                    "header": [
                                        {
                                            "key": "Accept",
                                            "value": "{{accept_json}}"
                                        }
                                    ],
                                    "url": {
                                        "raw": "{{base_url}}{{by_figi_endpoint}}/{{figi_sber}}?figi={{figi_sber}}",
                                        "host": [
                                            "{{base_url}}"
                                        ],
                                        "path": [
                                            "api",
                                            "cache",
                                            "by-figi",
                                            "{{figi_sber}}"
                                        ],
                                        "query": [
                                            {
                                                "key": "figi",
                                                "value": "{{figi_sber}}"
                                            }
                                        ]
                                    },
                                    "description": "Пример запроса на получение данных Сбербанка по FIGI"
                                },
                                "response": [],
                                "event": [
                                    {
                                        "listen": "test",
                                        "script": {
                                            "type": "text/javascript",
                                            "exec": [
                                                "pm.test('Sberbank FIGI endpoint responds', function () {",
                                                "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                                                "});",
                                                "",
                                                "pm.test('URL contains correct FIGI', function () {",
                                                "    pm.expect(pm.request.url.toString()).to.include('{{figi_sber}}');",
                                                "});"
                                            ]
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "Get Gazprom by FIGI",
                                "request": {
                                    "method": "GET",
                                    "header": [
                                        {
                                            "key": "Accept",
                                            "value": "{{accept_json}}"
                                        }
                                    ],
                                    "url": {
                                        "raw": "{{base_url}}{{by_figi_endpoint}}/{{figi_gazprom}}?figi={{figi_gazprom}}",
                                        "host": [
                                            "{{base_url}}"
                                        ],
                                        "path": [
                                            "api",
                                            "cache",
                                            "by-figi",
                                            "{{figi_gazprom}}"
                                        ],
                                        "query": [
                                            {
                                                "key": "figi",
                                                "value": "{{figi_gazprom}}"
                                            }
                                        ]
                                    },
                                    "description": "Пример запроса на получение данных Газпрома по FIGI"
                                },
                                "response": [],
                                "event": [
                                    {
                                        "listen": "test",
                                        "script": {
                                            "type": "text/javascript",
                                            "exec": [
                                                "pm.test('Gazprom FIGI endpoint responds', function () {",
                                                "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                                                "});"
                                            ]
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "Get Yandex by FIGI",
                                "request": {
                                    "method": "GET",
                                    "header": [
                                        {
                                            "key": "Accept",
                                            "value": "{{accept_json}}"
                                        }
                                    ],
                                    "url": {
                                        "raw": "{{base_url}}{{by_figi_endpoint}}/{{figi_yandex}}?figi={{figi_yandex}}",
                                        "host": [
                                            "{{base_url}}"
                                        ],
                                        "path": [
                                            "api",
                                            "cache",
                                            "by-figi",
                                            "{{figi_yandex}}"
                                        ],
                                        "query": [
                                            {
                                                "key": "figi",
                                                "value": "{{figi_yandex}}"
                                            }
                                        ]
                                    },
                                    "description": "Пример запроса на получение данных Яндекса по FIGI"
                                },
                                "response": [],
                                "event": [
                                    {
                                        "listen": "test",
                                        "script": {
                                            "type": "text/javascript",
                                            "exec": [
                                                "pm.test('Yandex FIGI endpoint responds', function () {",
                                                "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                                                "});"
                                            ]
                                        }
                                    }
                                ]
                            }
                        ],
                        "description": "Примеры получения инструментов по FIGI коду"
                    }
                ],
                "event": [
                    {
                        "listen": "prerequest",
                        "script": {
                            "type": "text/javascript",
                            "exec": [
                                "// Логирование запроса",
                                "console.log('Making request to: ' + pm.request.url);",
                                "console.log('Request method: ' + pm.request.method);",
                                "console.log('Environment: ' + pm.environment.name);",
                                "",
                                "// Установка timestamp для запросов",
                                "pm.globals.set('request_timestamp', new Date().toISOString());"
                            ]
                        }
                    },
                    {
                        "listen": "test",
                        "script": {
                            "type": "text/javascript",
                            "exec": [
                                "// Базовые проверки для всех запросов",
                                "pm.test('Response time is less than ' + pm.environment.get('expected_response_time') + 'ms', function () {",
                                "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('expected_response_time')));",
                                "});",
                                "",
                                "pm.test('Response has valid format', function () {",
                                "    if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                                "        pm.response.to.have.jsonBody();",
                                "    }",
                                "});",
                                "",
                                "// Логирование ответа",
                                "console.log('Response status: ' + pm.response.status);",
                                "console.log('Response time: ' + pm.response.responseTime + 'ms');",
                                "console.log('Response size: ' + pm.response.responseSize + ' bytes');",
                                "",
                                "// Сохранение времени выполнения в переменные",
                                "pm.environment.set('last_response_time', pm.response.responseTime);",
                                "pm.environment.set('last_request_timestamp', pm.globals.get('request_timestamp'));"
                            ]
                        }
                    }
                ],
                "variable": [
                    {
                        "key": "base_url",
                        "value": "http://localhost:8089",
                        "type": "string"
                    },
                    {
                        "key": "collection_version",
                        "value": "1.0.0",
                        "type": "string"
                    }
                ]
            }